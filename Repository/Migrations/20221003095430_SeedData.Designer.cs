// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221003095430_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3375dc1e-b359-403e-9f13-5e2b395ffafc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "93013dd1-eb1c-458b-a397-f07a4d01e5f6",
                            Email = "t.abdelmajid@Alexsys.solutions",
                            EmailConfirmed = true,
                            IsActive = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "T.ABDELMAJID@ALEXSYS.SOLUTIONS",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELfYBUTvEAubMIkjap6ZKZU7Fr9SVYbMLgokgubRXPLBzLMpWndYUBJE90zhtZ/hcg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "78806f6d-7f1f-4d2f-9a13-ce06383ed217",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "7167d11d-9358-4262-b7a4-77372e1c121d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a44029d7-21cd-4504-8e7b-9d06cfa06e22",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "CVNom",
                            NormalizedUserName = "CV",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhqIY39UAWwZCPxG1+zjh3zLwtj/dqto4nkCQcRCiLRBiWp8rdl0IKipWtvVQrpUA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "CVPrenom",
                            SecurityStamp = "45a41cea-397f-4837-9706-945073586524",
                            TwoFactorEnabled = false,
                            UserName = "CV"
                        },
                        new
                        {
                            Id = "2e142fe7-a372-4b98-ab9d-dcc4e4966b88",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d8ee1a9-ab94-4afc-bb77-7dd014156a25",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "RCNom",
                            NormalizedUserName = "RC",
                            PasswordHash = "AQAAAAEAACcQAAAAEDrXcu1fcDfKrt6aNuproHNrJ3xx4roGVcwHiQe6KGO7RSb/QGfzAOhLsIyGRasMfA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "RCPrenom",
                            SecurityStamp = "925b8781-e141-4f60-9dfc-293d3e24b78f",
                            TwoFactorEnabled = false,
                            UserName = "RC"
                        },
                        new
                        {
                            Id = "b8888a0f-ebcf-4b0a-815a-83ccc0a4c349",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d46eb0e-e1a3-43f5-b0c5-5c297547601b",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "DAPBENom",
                            NormalizedUserName = "DABPE",
                            PasswordHash = "AQAAAAEAACcQAAAAEKILS6AhXb9SC6VxeKWvTQrGn453uWRRbQUBIdPzkJXISS4K4JO1YYvXvljgxSF8AQ==",
                            PhoneNumberConfirmed = false,
                            Prenom = "DAPBEPrenom",
                            SecurityStamp = "54227a7c-67ee-4ebb-b9d0-272ccb30e483",
                            TwoFactorEnabled = false,
                            UserName = "DAPBE"
                        },
                        new
                        {
                            Id = "3e45b10c-0d15-49f2-903b-7de4bbc62f98",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ff6ca60-b596-4c08-9177-78379769437b",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "PTNom",
                            NormalizedUserName = "PT",
                            PasswordHash = "AQAAAAEAACcQAAAAEFV0UoW+VSGxwM2SoLOc4eYoApxr0xoIIZF9LGqTHrR1FIe2iqkbJzSTBghzbaeToA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "PTPrenom",
                            SecurityStamp = "58053aac-a438-4e44-acce-4f967d8df300",
                            TwoFactorEnabled = false,
                            UserName = "PT"
                        },
                        new
                        {
                            Id = "d19f9bc1-13b4-42b3-881a-a847f4c0684e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "bb77036a-bf60-4249-82c1-3ddfc75311e0",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "RLNom",
                            NormalizedUserName = "RL",
                            PasswordHash = "AQAAAAEAACcQAAAAEB1o/Igh/C5MIqzrZhvM5bOGlnfYkNzyVLG2PmfTSj9m1JHebEE8XvkbsvKAvtVNXA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "RLPrenom",
                            SecurityStamp = "adf0467d-bf4f-4bf5-a576-078dac83af6b",
                            TwoFactorEnabled = false,
                            UserName = "RL"
                        },
                        new
                        {
                            Id = "fe1300d0-ecf8-4bb5-afaf-5030b27959bd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ec48f552-56aa-4998-ab5c-e2b57df36f7c",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "ADVNome",
                            NormalizedUserName = "ADV",
                            PasswordHash = "AQAAAAEAACcQAAAAEM01AKiu2t9LlsZUAyoZnIPfMZxnIqc/nnAOZ+vLCYEZLTaaw00O7AWEmPmgwWC/+A==",
                            PhoneNumberConfirmed = false,
                            Prenom = "ADVPrenom",
                            SecurityStamp = "02d7a2a5-9486-4980-b031-b1728f9125f1",
                            TwoFactorEnabled = false,
                            UserName = "ADV"
                        },
                        new
                        {
                            Id = "48e50810-f7fc-45c8-8d13-0a03a6a8b1de",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6a669fd-f838-4fbc-967c-2fe45b02bda7",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "CCNom",
                            NormalizedUserName = "CC",
                            PasswordHash = "AQAAAAEAACcQAAAAEJRyaeytwUC7u0TPLi2ObUhuIrmnc2Fx1KhfzC3CcyhkGwDgzzB9yxOWwlog8s1HQA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "CCPrenom",
                            SecurityStamp = "8e031d55-7c1e-4a55-896b-288a6f628ecd",
                            TwoFactorEnabled = false,
                            UserName = "CC"
                        },
                        new
                        {
                            Id = "f32d5249-cfe5-4b76-909e-4ef6d73cd504",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c628c842-66a9-4496-912e-ba81ecbcd02e",
                            EmailConfirmed = false,
                            IsActive = false,
                            LockoutEnabled = false,
                            Nom = "CNom",
                            NormalizedUserName = "COMMERCIAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEPMPKXvQjbCSYTmmF30iyI18EqJUMwilOByfsYEeEK8WjakVjJ/SWNz4s9ophsAJZA==",
                            PhoneNumberConfirmed = false,
                            Prenom = "CPrenom",
                            SecurityStamp = "8e031d55-7c1e-4a55-896b-288a6f628ecd",
                            TwoFactorEnabled = false,
                            UserName = "Commercial"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.Property<int>("Article_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Article_Id"), 1L, 1);

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Tarif")
                        .HasColumnType("float");

                    b.HasKey("Article_Id");

                    b.ToTable("Article");

                    b.HasData(
                        new
                        {
                            Article_Id = 1,
                            Designation = "Beton 1",
                            Tarif = 50.0
                        },
                        new
                        {
                            Article_Id = 2,
                            Designation = "Beton 2",
                            Tarif = 60.0
                        },
                        new
                        {
                            Article_Id = 3,
                            Designation = "Beton 3",
                            Tarif = 70.0
                        },
                        new
                        {
                            Article_Id = 4,
                            Designation = "Beton Spécial"
                        });
                });

            modelBuilder.Entity("Domain.Entities.CentraleBeton", b =>
                {
                    b.Property<int>("Ctr_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctr_Id"), 1L, 1);

                    b.Property<string>("Ctr_Adresse")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Ctr_CodePostal")
                        .HasColumnType("int");

                    b.Property<string>("Ctr_Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Gsm")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ctr_Latiture")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctr_Longitude")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctr_Nom")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Ctr_Responsable")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Responsable_Gsm")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Ctr_Ville_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rayon")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ctr_Id");

                    b.HasIndex("Ctr_Ville_Id");

                    b.ToTable("Centrale_Beton");

                    b.HasData(
                        new
                        {
                            Ctr_Id = 1,
                            Ctr_Adresse = "Adresse 1",
                            Ctr_CodePostal = 20250,
                            Ctr_Email = "Centrale1@gmail.com",
                            Ctr_Gsm = "0620055784",
                            Ctr_Longitude = "-7.618710247586268",
                            Ctr_Nom = "Centrale 1",
                            Ctr_Responsable = "Test",
                            Ctr_Responsable_Gsm = "0620055784",
                            Ctr_Ville_Id = 2
                        },
                        new
                        {
                            Ctr_Id = 2,
                            Ctr_Adresse = "Adresse 2",
                            Ctr_CodePostal = 20250,
                            Ctr_Email = "Centrale2@gmail.com",
                            Ctr_Gsm = "0520055784",
                            Ctr_Longitude = "-7.533456",
                            Ctr_Nom = "Centrale 2",
                            Ctr_Responsable = "Test 2",
                            Ctr_Responsable_Gsm = "0625255784",
                            Ctr_Ville_Id = 2
                        },
                        new
                        {
                            Ctr_Id = 3,
                            Ctr_Adresse = "Adresse 3",
                            Ctr_CodePostal = 20256,
                            Ctr_Email = "Centrale3@gmail.com",
                            Ctr_Gsm = "0525055784",
                            Ctr_Longitude = "-7,6738",
                            Ctr_Nom = "Centrale 3",
                            Ctr_Responsable = "Test 3",
                            Ctr_Responsable_Gsm = "0625285784",
                            Ctr_Ville_Id = 2
                        });
                });

            modelBuilder.Entity("Domain.Entities.Chantier", b =>
                {
                    b.Property<int>("Ctn_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctn_Id"), 1L, 1);

                    b.Property<string>("Ctn_Adresse")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Ctn_Ctr_Id")
                        .HasColumnType("int");

                    b.Property<string>("Ctn_Latiture")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctn_Longitude")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctn_Nom")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Ctn_Tc_Id")
                        .HasColumnType("int");

                    b.Property<int>("Ctn_Zone_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Duree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaitreOuvrage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rayon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VolumePrevisonnel")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ctn_Id");

                    b.HasIndex("Ctn_Ctr_Id");

                    b.HasIndex("Ctn_Tc_Id");

                    b.HasIndex("Ctn_Zone_Id");

                    b.ToTable("Chantier");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Client_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Client_Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Client_Ctn_Id")
                        .HasColumnType("int");

                    b.Property<string>("Cnie")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeClientSap")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Destinataire_Interlocuteur")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FormeJuridique_Id")
                        .HasColumnType("int");

                    b.Property<string>("Gsm")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ice")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int");

                    b.Property<string>("RaisonSociale")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Client_Id");

                    b.HasIndex("Client_Ctn_Id");

                    b.HasIndex("FormeJuridique_Id");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdVille");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCommande"), 1L, 1);

                    b.Property<string>("ArticleFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeClientSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeCommandeSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCommande")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DateLivraisonSouhaite")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Delai_Paiement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdChantier")
                        .HasColumnType("int");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatut")
                        .HasColumnType("int");

                    b.Property<int?>("LongFleche_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontantCommande")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TarifAchatPompage")
                        .HasColumnType("float");

                    b.Property<double>("TarifAchatTransport")
                        .HasColumnType("float");

                    b.Property<double>("TarifVentePompage")
                        .HasColumnType("float");

                    b.Property<double>("TarifVenteTransport")
                        .HasColumnType("float");

                    b.HasKey("IdCommande");

                    b.HasIndex("IdChantier");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdStatut");

                    b.HasIndex("LongFleche_Id");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("Domain.Entities.DelaiPaiement", b =>
                {
                    b.Property<int>("Delai_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Delai_Id"), 1L, 1);

                    b.Property<string>("Delai_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Delai_Id");

                    b.ToTable("Delai_Paiement");
                });

            modelBuilder.Entity("Domain.Entities.DetailCommande", b =>
                {
                    b.Property<int>("IdDetailCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailCommande"), 1L, 1);

                    b.Property<string>("CodeArticleSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeCommandeSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DateProduction")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int");

                    b.Property<int?>("IdCommande")
                        .HasColumnType("int");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Unite_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetailCommande");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdCommande");

                    b.HasIndex("Unite_Id");

                    b.ToTable("DetailCommande");
                });

            modelBuilder.Entity("Domain.Entities.FormeJuridique", b =>
                {
                    b.Property<int>("FormeJuridique_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormeJuridique_Id"), 1L, 1);

                    b.Property<string>("FormeJuridique_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FormeJuridique_Id");

                    b.ToTable("Forme_Juridique");

                    b.HasData(
                        new
                        {
                            FormeJuridique_Id = 1,
                            FormeJuridique_Libelle = "SA"
                        },
                        new
                        {
                            FormeJuridique_Id = 2,
                            FormeJuridique_Libelle = "SARL"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Paiement", b =>
                {
                    b.Property<int>("Paiement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Paiement_Id"), 1L, 1);

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Paiement_Id");

                    b.ToTable("Paiement");
                });

            modelBuilder.Entity("Domain.Entities.Pays", b =>
                {
                    b.Property<int>("IdPays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPays"), 1L, 1);

                    b.Property<string>("CodePaysSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NomPays")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPays");

                    b.ToTable("Pays");

                    b.HasData(
                        new
                        {
                            IdPays = 1,
                            CodePaysSap = "MA",
                            NomPays = "Maroc"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Statut", b =>
                {
                    b.Property<int>("IdStatut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatut"), 1L, 1);

                    b.Property<string>("CodeStatutSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdStatut");

                    b.ToTable("Statut");

                    b.HasData(
                        new
                        {
                            IdStatut = 1,
                            CodeStatutSap = "1",
                            Libelle = "Etude et proposition de prix"
                        },
                        new
                        {
                            IdStatut = 2,
                            CodeStatutSap = "2",
                            Libelle = "Parametrage des prix PBE"
                        },
                        new
                        {
                            IdStatut = 3,
                            CodeStatutSap = "3",
                            Libelle = "Validation de l'offre de prix"
                        },
                        new
                        {
                            IdStatut = 4,
                            CodeStatutSap = "4",
                            Libelle = "Fixation de prix du transport"
                        },
                        new
                        {
                            IdStatut = 5,
                            CodeStatutSap = "5",
                            Libelle = "Parametrage des prix de services"
                        },
                        new
                        {
                            IdStatut = 6,
                            CodeStatutSap = "6",
                            Libelle = "Validé"
                        },
                        new
                        {
                            IdStatut = 7,
                            CodeStatutSap = "7",
                            Libelle = "En cours de validation"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TarifBetonRef", b =>
                {
                    b.Property<int>("Tbr_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tbr_Id"), 1L, 1);

                    b.Property<string>("Designation_Beton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Tarif")
                        .HasColumnType("float");

                    b.HasKey("Tbr_Id");

                    b.ToTable("Tarif_Ref");
                });

            modelBuilder.Entity("Domain.Entities.TarifPompeRef", b =>
                {
                    b.Property<int>("Tpr_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tpr_Id"), 1L, 1);

                    b.Property<string>("LongFleche_Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LongFleche_Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Tpr_Id");

                    b.ToTable("Tarif_Pompe");

                    b.HasData(
                        new
                        {
                            Tpr_Id = 1,
                            LongFleche_Libelle = "48",
                            LongFleche_Prix = 50m
                        },
                        new
                        {
                            Tpr_Id = 2,
                            LongFleche_Libelle = "50",
                            LongFleche_Prix = 60m
                        },
                        new
                        {
                            Tpr_Id = 3,
                            LongFleche_Libelle = "52",
                            LongFleche_Prix = 70m
                        });
                });

            modelBuilder.Entity("Domain.Entities.TarifService", b =>
                {
                    b.Property<int>("TS_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TS_Id"), 1L, 1);

                    b.Property<double>("TarifPompage")
                        .HasColumnType("float");

                    b.Property<double>("TarifTransport")
                        .HasColumnType("float");

                    b.HasKey("TS_Id");

                    b.ToTable("Tarif_Service");
                });

            modelBuilder.Entity("Domain.Entities.TypeChantier", b =>
                {
                    b.Property<int>("Tc_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tc_Id"), 1L, 1);

                    b.Property<string>("Tc_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Tc_Id");

                    b.ToTable("Type_Chantier");

                    b.HasData(
                        new
                        {
                            Tc_Id = 1,
                            Tc_Libelle = "Type 1"
                        },
                        new
                        {
                            Tc_Id = 2,
                            Tc_Libelle = "Type 2"
                        },
                        new
                        {
                            Tc_Id = 3,
                            Tc_Libelle = "Type 3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Unite", b =>
                {
                    b.Property<int>("IdUnite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUnite"), 1L, 1);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUnite");

                    b.ToTable("Unite");

                    b.HasData(
                        new
                        {
                            IdUnite = 1,
                            Libelle = "m3"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Validation", b =>
                {
                    b.Property<int>("Validation_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Validation_Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("IdCommande")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatut")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationLibelle")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Validation_Id");

                    b.HasIndex("IdCommande");

                    b.ToTable("Validateur");
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.Property<int>("IdVille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVille"), 1L, 1);

                    b.Property<string>("CodePaysSap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVilleSap")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int");

                    b.Property<string>("NomVille")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdVille");

                    b.HasIndex("IdPays");

                    b.ToTable("Ville");

                    b.HasData(
                        new
                        {
                            IdVille = 1,
                            CodePaysSap = "MA",
                            CodeVilleSap = "R",
                            IdPays = 1,
                            NomVille = "Rabat"
                        },
                        new
                        {
                            IdVille = 2,
                            CodePaysSap = "MA",
                            CodeVilleSap = "C",
                            IdPays = 1,
                            NomVille = "Casablanca"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Zone", b =>
                {
                    b.Property<int>("Zone_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zone_Id"), 1L, 1);

                    b.Property<string>("Zone_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Zone_Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Zone_Id");

                    b.ToTable("Zone");

                    b.HasData(
                        new
                        {
                            Zone_Id = 1,
                            Zone_Libelle = "Zone 1",
                            Zone_Prix = 50m
                        },
                        new
                        {
                            Zone_Id = 2,
                            Zone_Libelle = "Zone 2",
                            Zone_Prix = 60m
                        },
                        new
                        {
                            Zone_Id = 3,
                            Zone_Libelle = "Zone 3",
                            Zone_Prix = 70m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "48e33a01-bd1f-4739-a27f-126e8e8b2d1c",
                            ConcurrencyStamp = "8bb2741f-9704-4d37-a501-6741d14d5f93",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "1588b3b9-37bc-4f58-acf9-e42fd47f1c28",
                            ConcurrencyStamp = "2bf243d6-5aa0-40c1-bc3c-470ba24c7dfb",
                            Name = "Chef de ventes",
                            NormalizedName = "CHEF DE VENTES"
                        },
                        new
                        {
                            Id = "6eafdfbe-ed07-4687-9d2c-0b767b15a305",
                            ConcurrencyStamp = "42d08be2-5105-4aca-94ce-ad8c9129fbff",
                            Name = "Responsable commercial",
                            NormalizedName = "RESPONSABLE COMMERCIAL"
                        },
                        new
                        {
                            Id = "9be024db-d122-4cd2-8329-2afd0d259e77",
                            ConcurrencyStamp = "0a545942-a790-4345-8674-88f653b3d100",
                            Name = "DA BPE",
                            NormalizedName = "DA BPE"
                        },
                        new
                        {
                            Id = "126a635b-d763-48bf-ab0e-f5599cffb4fe",
                            ConcurrencyStamp = "0748555d-5884-467c-a3ba-88130f9ee2e7",
                            Name = "Prescripteur technique",
                            NormalizedName = "PRESCRIPTEUR TECHNIQUE"
                        },
                        new
                        {
                            Id = "a7846740-cb77-4d25-8da6-d5c68dfb590d",
                            ConcurrencyStamp = "30aac02c-8443-4e5e-b07e-46a508938b04",
                            Name = "Responsable logistique",
                            NormalizedName = "RESPONSABLE LOGISTIQUE"
                        },
                        new
                        {
                            Id = "3e130fc1-981e-4183-a12d-fa5f73d13bb2",
                            ConcurrencyStamp = "8223a248-89fb-4aec-95bb-f83ead8ccdd1",
                            Name = "Administration des ventes",
                            NormalizedName = "ADMINISTRATION DES VENTES"
                        },
                        new
                        {
                            Id = "7b8ab704-463e-4074-8c19-a62905f62e11",
                            ConcurrencyStamp = "b46a563a-b39b-491a-b71e-aef526e640c4",
                            Name = "Controle crédit",
                            NormalizedName = "CONTROLE CREDIT"
                        },
                        new
                        {
                            Id = "ab68ea17-b8d8-490a-aa11-75ff2973c01e",
                            ConcurrencyStamp = "da46d04a-d1de-42ee-aa4b-38f8669528c2",
                            Name = "Commercial",
                            NormalizedName = "COMMERCIAL"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3375dc1e-b359-403e-9f13-5e2b395ffafc",
                            RoleId = "48e33a01-bd1f-4739-a27f-126e8e8b2d1c"
                        },
                        new
                        {
                            UserId = "7167d11d-9358-4262-b7a4-77372e1c121d",
                            RoleId = "1588b3b9-37bc-4f58-acf9-e42fd47f1c28"
                        },
                        new
                        {
                            UserId = "2e142fe7-a372-4b98-ab9d-dcc4e4966b88",
                            RoleId = "6eafdfbe-ed07-4687-9d2c-0b767b15a305"
                        },
                        new
                        {
                            UserId = "b8888a0f-ebcf-4b0a-815a-83ccc0a4c349",
                            RoleId = "9be024db-d122-4cd2-8329-2afd0d259e77"
                        },
                        new
                        {
                            UserId = "3e45b10c-0d15-49f2-903b-7de4bbc62f98",
                            RoleId = "126a635b-d763-48bf-ab0e-f5599cffb4fe"
                        },
                        new
                        {
                            UserId = "d19f9bc1-13b4-42b3-881a-a847f4c0684e",
                            RoleId = "a7846740-cb77-4d25-8da6-d5c68dfb590d"
                        },
                        new
                        {
                            UserId = "fe1300d0-ecf8-4bb5-afaf-5030b27959bd",
                            RoleId = "3e130fc1-981e-4183-a12d-fa5f73d13bb2"
                        },
                        new
                        {
                            UserId = "48e50810-f7fc-45c8-8d13-0a03a6a8b1de",
                            RoleId = "7b8ab704-463e-4074-8c19-a62905f62e11"
                        },
                        new
                        {
                            UserId = "f32d5249-cfe5-4b76-909e-4ef6d73cd504",
                            RoleId = "ab68ea17-b8d8-490a-aa11-75ff2973c01e"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CentraleBeton", b =>
                {
                    b.HasOne("Domain.Entities.Ville", "VILLE")
                        .WithMany()
                        .HasForeignKey("Ctr_Ville_Id");

                    b.Navigation("VILLE");
                });

            modelBuilder.Entity("Domain.Entities.Chantier", b =>
                {
                    b.HasOne("Domain.Entities.CentraleBeton", "Centrale_Beton")
                        .WithMany()
                        .HasForeignKey("Ctn_Ctr_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TypeChantier", "Type_Chantier")
                        .WithMany()
                        .HasForeignKey("Ctn_Tc_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Zone", "ZONE_CHANTIER")
                        .WithMany()
                        .HasForeignKey("Ctn_Zone_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centrale_Beton");

                    b.Navigation("Type_Chantier");

                    b.Navigation("ZONE_CHANTIER");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Chantier", "Chantier")
                        .WithMany()
                        .HasForeignKey("Client_Ctn_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FormeJuridique", "Forme_Juridique")
                        .WithMany()
                        .HasForeignKey("FormeJuridique_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("IdPays");

                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("IdVille");

                    b.Navigation("Chantier");

                    b.Navigation("Forme_Juridique");

                    b.Navigation("Pays");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.HasOne("Domain.Entities.Chantier", "Chantier")
                        .WithMany()
                        .HasForeignKey("IdChantier");

                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient");

                    b.HasOne("Domain.Entities.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("IdStatut");

                    b.HasOne("Domain.Entities.TarifPompeRef", "Tarif_Pompe")
                        .WithMany()
                        .HasForeignKey("LongFleche_Id");

                    b.Navigation("Chantier");

                    b.Navigation("Client");

                    b.Navigation("Statut");

                    b.Navigation("Tarif_Pompe");
                });

            modelBuilder.Entity("Domain.Entities.DetailCommande", b =>
                {
                    b.HasOne("Domain.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("IdArticle");

                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany("DetailCommandes")
                        .HasForeignKey("IdCommande");

                    b.HasOne("Domain.Entities.Unite", "Unite")
                        .WithMany()
                        .HasForeignKey("Unite_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Commande");

                    b.Navigation("Unite");
                });

            modelBuilder.Entity("Domain.Entities.Validation", b =>
                {
                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany()
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.HasOne("Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("IdPays");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.Navigation("DetailCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
