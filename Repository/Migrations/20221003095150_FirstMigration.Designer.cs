// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository.Data;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221003095150_FirstMigration")]
    partial class FirstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Authentication.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Article", b =>
                {
                    b.Property<int>("Article_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Article_Id"), 1L, 1);

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(100)");

                    b.Property<double?>("Tarif")
                        .HasColumnType("float");

                    b.HasKey("Article_Id");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Domain.Entities.CentraleBeton", b =>
                {
                    b.Property<int>("Ctr_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctr_Id"), 1L, 1);

                    b.Property<string>("Ctr_Adresse")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Ctr_CodePostal")
                        .HasColumnType("int");

                    b.Property<string>("Ctr_Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Gsm")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Ctr_Latiture")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctr_Longitude")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctr_Nom")
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Ctr_Responsable")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ctr_Responsable_Gsm")
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Ctr_Ville_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Rayon")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ctr_Id");

                    b.HasIndex("Ctr_Ville_Id");

                    b.ToTable("Centrale_Beton");
                });

            modelBuilder.Entity("Domain.Entities.Chantier", b =>
                {
                    b.Property<int>("Ctn_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Ctn_Id"), 1L, 1);

                    b.Property<string>("Ctn_Adresse")
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Ctn_Ctr_Id")
                        .HasColumnType("int");

                    b.Property<string>("Ctn_Latiture")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctn_Longitude")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ctn_Nom")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Ctn_Tc_Id")
                        .HasColumnType("int");

                    b.Property<int>("Ctn_Zone_Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Duree")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MaitreOuvrage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rayon")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VolumePrevisonnel")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Ctn_Id");

                    b.HasIndex("Ctn_Ctr_Id");

                    b.HasIndex("Ctn_Tc_Id");

                    b.HasIndex("Ctn_Zone_Id");

                    b.ToTable("Chantier");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Client_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Client_Id"), 1L, 1);

                    b.Property<string>("Adresse")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("Client_Ctn_Id")
                        .HasColumnType("int");

                    b.Property<string>("Cnie")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CodeClientSap")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Destinataire_Interlocuteur")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("FormeJuridique_Id")
                        .HasColumnType("int");

                    b.Property<string>("Gsm")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Ice")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int");

                    b.Property<int?>("IdVille")
                        .HasColumnType("int");

                    b.Property<string>("RaisonSociale")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Client_Id");

                    b.HasIndex("Client_Ctn_Id");

                    b.HasIndex("FormeJuridique_Id");

                    b.HasIndex("IdPays");

                    b.HasIndex("IdVille");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.Property<int>("IdCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCommande"), 1L, 1);

                    b.Property<string>("ArticleFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeClientSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeCommandeSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Commentaire")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCommande")
                        .HasColumnType("smalldatetime");

                    b.Property<DateTime?>("DateLivraisonSouhaite")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Delai_Paiement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IdChantier")
                        .HasColumnType("int");

                    b.Property<int?>("IdClient")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatut")
                        .HasColumnType("int");

                    b.Property<int?>("LongFleche_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("MontantCommande")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("TarifAchatPompage")
                        .HasColumnType("float");

                    b.Property<double>("TarifAchatTransport")
                        .HasColumnType("float");

                    b.Property<double>("TarifVentePompage")
                        .HasColumnType("float");

                    b.Property<double>("TarifVenteTransport")
                        .HasColumnType("float");

                    b.HasKey("IdCommande");

                    b.HasIndex("IdChantier");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdStatut");

                    b.HasIndex("LongFleche_Id");

                    b.ToTable("Commande");
                });

            modelBuilder.Entity("Domain.Entities.DelaiPaiement", b =>
                {
                    b.Property<int>("Delai_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Delai_Id"), 1L, 1);

                    b.Property<string>("Delai_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Delai_Id");

                    b.ToTable("Delai_Paiement");
                });

            modelBuilder.Entity("Domain.Entities.DetailCommande", b =>
                {
                    b.Property<int>("IdDetailCommande")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailCommande"), 1L, 1);

                    b.Property<string>("CodeArticleSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("CodeCommandeSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("DateProduction")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IdArticle")
                        .HasColumnType("int");

                    b.Property<int?>("IdCommande")
                        .HasColumnType("int");

                    b.Property<decimal?>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Unite_Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("Volume")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdDetailCommande");

                    b.HasIndex("IdArticle");

                    b.HasIndex("IdCommande");

                    b.HasIndex("Unite_Id");

                    b.ToTable("DetailCommande");
                });

            modelBuilder.Entity("Domain.Entities.FormeJuridique", b =>
                {
                    b.Property<int>("FormeJuridique_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FormeJuridique_Id"), 1L, 1);

                    b.Property<string>("FormeJuridique_Libelle")
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("FormeJuridique_Id");

                    b.ToTable("Forme_Juridique");
                });

            modelBuilder.Entity("Domain.Entities.Paiement", b =>
                {
                    b.Property<int>("Paiement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Paiement_Id"), 1L, 1);

                    b.Property<string>("Conditions")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Paiement_Id");

                    b.ToTable("Paiement");
                });

            modelBuilder.Entity("Domain.Entities.Pays", b =>
                {
                    b.Property<int>("IdPays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPays"), 1L, 1);

                    b.Property<string>("CodePaysSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NomPays")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPays");

                    b.ToTable("Pays");
                });

            modelBuilder.Entity("Domain.Entities.Statut", b =>
                {
                    b.Property<int>("IdStatut")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdStatut"), 1L, 1);

                    b.Property<string>("CodeStatutSap")
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdStatut");

                    b.ToTable("Statut");
                });

            modelBuilder.Entity("Domain.Entities.TarifBetonRef", b =>
                {
                    b.Property<int>("Tbr_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tbr_Id"), 1L, 1);

                    b.Property<string>("Designation_Beton")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Tarif")
                        .HasColumnType("float");

                    b.HasKey("Tbr_Id");

                    b.ToTable("Tarif_Ref");
                });

            modelBuilder.Entity("Domain.Entities.TarifPompeRef", b =>
                {
                    b.Property<int>("Tpr_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tpr_Id"), 1L, 1);

                    b.Property<string>("LongFleche_Libelle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LongFleche_Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Tpr_Id");

                    b.ToTable("Tarif_Pompe");
                });

            modelBuilder.Entity("Domain.Entities.TarifService", b =>
                {
                    b.Property<int>("TS_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TS_Id"), 1L, 1);

                    b.Property<double>("TarifPompage")
                        .HasColumnType("float");

                    b.Property<double>("TarifTransport")
                        .HasColumnType("float");

                    b.HasKey("TS_Id");

                    b.ToTable("Tarif_Service");
                });

            modelBuilder.Entity("Domain.Entities.TypeChantier", b =>
                {
                    b.Property<int>("Tc_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Tc_Id"), 1L, 1);

                    b.Property<string>("Tc_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Tc_Id");

                    b.ToTable("Type_Chantier");
                });

            modelBuilder.Entity("Domain.Entities.Unite", b =>
                {
                    b.Property<int>("IdUnite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUnite"), 1L, 1);

                    b.Property<string>("Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUnite");

                    b.ToTable("Unite");
                });

            modelBuilder.Entity("Domain.Entities.Validation", b =>
                {
                    b.Property<int>("Validation_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Validation_Id"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Fonction")
                        .HasColumnType("nvarchar(80)");

                    b.Property<int>("IdCommande")
                        .HasColumnType("int");

                    b.Property<int?>("IdStatut")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prenom")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ValidationLibelle")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Validation_Id");

                    b.HasIndex("IdCommande");

                    b.ToTable("Validateur");
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.Property<int>("IdVille")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVille"), 1L, 1);

                    b.Property<string>("CodePaysSap")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeVilleSap")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("IdPays")
                        .HasColumnType("int");

                    b.Property<string>("NomVille")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdVille");

                    b.HasIndex("IdPays");

                    b.ToTable("Ville");
                });

            modelBuilder.Entity("Domain.Entities.Zone", b =>
                {
                    b.Property<int>("Zone_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zone_Id"), 1L, 1);

                    b.Property<string>("Zone_Libelle")
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Zone_Prix")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Zone_Id");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CentraleBeton", b =>
                {
                    b.HasOne("Domain.Entities.Ville", "VILLE")
                        .WithMany()
                        .HasForeignKey("Ctr_Ville_Id");

                    b.Navigation("VILLE");
                });

            modelBuilder.Entity("Domain.Entities.Chantier", b =>
                {
                    b.HasOne("Domain.Entities.CentraleBeton", "Centrale_Beton")
                        .WithMany()
                        .HasForeignKey("Ctn_Ctr_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.TypeChantier", "Type_Chantier")
                        .WithMany()
                        .HasForeignKey("Ctn_Tc_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Zone", "ZONE_CHANTIER")
                        .WithMany()
                        .HasForeignKey("Ctn_Zone_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Centrale_Beton");

                    b.Navigation("Type_Chantier");

                    b.Navigation("ZONE_CHANTIER");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Chantier", "Chantier")
                        .WithMany()
                        .HasForeignKey("Client_Ctn_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.FormeJuridique", "Forme_Juridique")
                        .WithMany()
                        .HasForeignKey("FormeJuridique_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("IdPays");

                    b.HasOne("Domain.Entities.Ville", "Ville")
                        .WithMany()
                        .HasForeignKey("IdVille");

                    b.Navigation("Chantier");

                    b.Navigation("Forme_Juridique");

                    b.Navigation("Pays");

                    b.Navigation("Ville");
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.HasOne("Domain.Entities.Chantier", "Chantier")
                        .WithMany()
                        .HasForeignKey("IdChantier");

                    b.HasOne("Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("IdClient");

                    b.HasOne("Domain.Entities.Statut", "Statut")
                        .WithMany()
                        .HasForeignKey("IdStatut");

                    b.HasOne("Domain.Entities.TarifPompeRef", "Tarif_Pompe")
                        .WithMany()
                        .HasForeignKey("LongFleche_Id");

                    b.Navigation("Chantier");

                    b.Navigation("Client");

                    b.Navigation("Statut");

                    b.Navigation("Tarif_Pompe");
                });

            modelBuilder.Entity("Domain.Entities.DetailCommande", b =>
                {
                    b.HasOne("Domain.Entities.Article", "Article")
                        .WithMany()
                        .HasForeignKey("IdArticle");

                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany("DetailCommandes")
                        .HasForeignKey("IdCommande");

                    b.HasOne("Domain.Entities.Unite", "Unite")
                        .WithMany()
                        .HasForeignKey("Unite_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Commande");

                    b.Navigation("Unite");
                });

            modelBuilder.Entity("Domain.Entities.Validation", b =>
                {
                    b.HasOne("Domain.Entities.Commande", "Commande")
                        .WithMany()
                        .HasForeignKey("IdCommande")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commande");
                });

            modelBuilder.Entity("Domain.Entities.Ville", b =>
                {
                    b.HasOne("Domain.Entities.Pays", "Pays")
                        .WithMany()
                        .HasForeignKey("IdPays");

                    b.Navigation("Pays");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Domain.Authentication.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Commande", b =>
                {
                    b.Navigation("DetailCommandes");
                });
#pragma warning restore 612, 618
        }
    }
}
